CREATE TABLE IF NOT EXISTS USERS (
  ID SERIAL PRIMARY KEY,
  USERNAME VARCHAR(256) NOT NULL,
  PASSWORD VARCHAR(256) NOT NULL,
  EMAIL VARCHAR(256) NOT NULL,
  NAME VARCHAR(256),
  LASTNAME VARCHAR(256),
  COMPANY VARCHAR(256),
  EMAILVERIFICATION BOOLEAN,
  DATECREATED TIMESTAMP,
  UNIQUE(USERNAME)
);

CREATE TABLE IF NOT EXISTS ROLES (
  ID SERIAL PRIMARY KEY,
  NAME VARCHAR(256) NOT NULL,
  UNIQUE(NAME)
);

CREATE TABLE IF NOT EXISTS USERROLES(
    ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);

CREATE TABLE IF NOT EXISTS PRODUCT(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(256) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    IMAGEURL TEXT,
    PRICE DOUBLE PRECISION NOT NULL
);

CREATE TABLE IF NOT EXISTS ORDERS(
    ID SERIAL PRIMARY KEY,
    USER_ID INTEGER ,
    AMOUNT DOUBLE PRECISION ,
    ORDERDATE TIMESTAMP ,
    STATUS INTEGER ,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS ORDERDETAILS(
    ID SERIAL PRIMARY KEY,
    QUANTITY INTEGER NOT NULL,
    ORDER_ID INTEGER NOT NULL,
    PRODUCT_ID INTEGER NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE IF NOT EXISTS PASSWORDRESET(
    ID SERIAL PRIMARY KEY,
    TOKEN TEXT,
    USER_ID INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS EMAILVERIFICATION(
    ID SERIAL PRIMARY KEY,
    TOKEN TEXT,
    USER_ID INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS ANALYSIS(
    ID SERIAL PRIMARY KEY,
    USER_ID INTEGER NOT NULL,
    STATUS INTEGER,
    DATECREATED TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CREATE TABLE IF NOT EXISTS MEMBER(
    ID SERIAL PRIMARY KEY,
    FIRSTNAME VARCHAR(256),
    LASTNAME VARCHAR(256),
    EMAIL VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS MEMBERFUNCTIONS(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS TEAMMEMBER(
    ID SERIAL PRIMARY KEY,
    ANALYSIS_ID INTEGER,
    MEMBER_ID INTEGER,
    MEMBERFUNCTION_ID INTEGER,
    --DATESUBMITED TIMESTAMP,
    STATUS INTEGER,
    FOREIGN KEY (ANALYSIS_ID) REFERENCES ANALYSIS(ID),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(ID),
    FOREIGN KEY (MEMBERFUNCTION_ID) REFERENCES MEMBERFUNCTIONS(ID)
);

CREATE TABLE IF NOT EXISTS ADDITIONALQUEST(
    ID SERIAL PRIMARY KEY,
    DESCRIPTION TEXT
);

CREATE TABLE IF NOT EXISTS QUESTIONNAIRETYPE (
    ID SERIAL PRIMARY KEY,
    NAME TEXT
);

CREATE TABLE IF NOT EXISTS QUESTIONNAIRE(
    ID SERIAL PRIMARY KEY,
    ANALYSIS_ID INTEGER,
    RESPONSIBLETEAMMEMBER_ID INTEGER,
    TEAMMEMBER_ID INTEGER,
    RATING INTEGER,
    ADDITIONALQUEST_ID INTEGER,
    FOREIGN KEY (ANALYSIS_ID) REFERENCES ANALYSIS(ID),
    FOREIGN KEY (TEAMMEMBER_ID) REFERENCES TEAMMEMBER(ID),
    FOREIGN KEY (RESPONSIBLETEAMMEMBER_ID) REFERENCES TEAMMEMBER(ID),
    FOREIGN KEY (ADDITIONALQUEST_ID) REFERENCES ADDITIONALQUEST(ID)
);

CREATE TABLE IF NOT EXISTS PURCHASEPLAN (
    ID SERIAL PRIMARY KEY,
    NAME TEXT,
    DESCRIPTION TEXT,
    IMAGEURL TEXT,
    PRICE DOUBLE PRECISION
);

CREATE TABLE IF NOT EXISTS PURCHASEPLANLINES (
    ID SERIAL PRIMARY KEY,
    PURCHASEPLAN_ID INTEGER,
    PRODUCT_ID INTEGER,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID),
    FOREIGN KEY (PURCHASEPLAN_ID) REFERENCES PURCHASEPLAN(ID)
);

CREATE TABLE IF NOT EXISTS IMAGES (
    ID SERIAL PRIMARY KEY,
    IMAGE BYTEA,
    NAME TEXT
);

CREATE TABLE IF NOT EXISTS VOUCHERTEMPLATE (
    ID SERIAL PRIMARY KEY,
    NAME TEXT,
    PRODUCT_ID INTEGER,
    PURCHASEPLAN_ID INTEGER,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID),
    FOREIGN KEY (PURCHASEPLAN_ID) REFERENCES PURCHASEPLAN(ID)
);

CREATE TABLE IF NOT EXISTS VOUCHER (
    ID SERIAL PRIMARY KEY,
    CODE TEXT,
    EXPIRATIONDATE TIMESTAMP,
    SUBMITEDDATE TIMESTAMP,
    STATUS INTEGER,
    VOUCHERTEMPLATE_ID INTEGER,
    PRODUCT_ID INTEGER,
    PURCHASEPLAN_ID INTEGER,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID),
    FOREIGN KEY (PURCHASEPLAN_ID) REFERENCES PURCHASEPLAN(ID)
);
